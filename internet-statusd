#!/usr/bin/python

import sys
import os
import time
import signal
import threading
import datetime
import re
import logging
import socket
from collections import deque
from collections import OrderedDict
import argparse
import traceback
import subprocess
import configparser
import json
import paho.mqtt.client as mqtt


#
# Class that describes and manages site information.
#

class Site(object):

    def __init__(self, hostname):
        self.hostname = hostname
        self.up = False
        self.attempts = 0
        self.successes = 0
        self.rtt_count = 0
        self.rtt_min = sys.float_info.max
        self.rtt_max = 0.0
        self.rtt_tot = 0.0
        self.last_attempt = 0
        self.last_success = 0
        self.last_failure = 0

    def ping(self):
        self.attempts += 1
        self.last_attempt = time.time()
        args = ['/bin/ping', '-c 1', self.hostname]
        process = subprocess.Popen(' '.join(args), shell=True,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        response = process.returncode
        if response == 0:
            self.up = True
            self.successes += 1
            self.last_success = time.time()
            pattern = '.*\n' + \
                      'rtt min/avg/max/mdev = ' + \
                      '([\d]+\.[\d]+)' + '/' + \
                      '([\d]+\.[\d]+)' + '/' + \
                      '([\d]+\.[\d]+)' + '/' + \
                      '([\d]+\.[\d]+)' + ' ms\n'
            match = re.search(pattern, stdout.decode('utf-8'))
            if match:
                self.rtt_count += 1
                self.rtt_min = min(self.rtt_min, float(match.group(1)))
                self.rtt_tot += float(match.group(2))
                self.rtt_max = max(self.rtt_max, float(match.group(3)))
        else:
            self.up = False
            self.last_failure = time.time()
        return response

    def rtt_times(self):
        if self.rtt_count > 0:
            times = (self.rtt_min, (self.rtt_tot / self.rtt_count), self.rtt_max)
        else:
            times = (0.0, 0.0, 0.0)
        return times

    def status(self):
        return 'Up' if self.up else 'Down'

    def uptime(self):
        denominator = float(self.attempts if self.attempts > 0 else 1)
        return int(100.0 * (float(self.successes) / denominator))


#
# Class that maintains the Internet connection's status.
#

class Status(object):

    criteria = (("down", 0.15), ("unstable", 0.60), ("up", 1.0))

    def __init__(self, observations=10):
        self.iteration = 0
        self.failures = 0
        self.score  = 0.0
        self.state  = None
        self.history = deque(maxlen=observations)
        self.states = OrderedDict()
        for name, threshold in Status.criteria:
            self.states[name] = {
                'name' : name,
                'threshold': threshold,
                'events': 0,
                'last': 'None detected'
            }

    def update(self, response):
        succeeded = True if response == 0 else False
        self.history.append(int(succeeded))
        self.iteration += 1
        if not succeeded:
            self.failures += 1
        if len(self.history) == self.history.maxlen:
            self.score = float(sum(self.history)) / float(len(self.history))
            for state in self.states:
                if self.score <= self.states[state]['threshold']:
                    self.state = state
                    break
            self.states[state]['last'] = time_now()
            self.states[state]['events'] += 1

    def generator(self):
        for state in self.states:
            yield self.states[state]

    def last(self, state):
        return self.states[state]['last']

    def count(self, state):
        return self.states[state]['count']


#
# Send the Internet connect status and the sites as a
# simple text datagram on the 'localhost'.
#

def report(status, sites, current, interval, now, runtime):
    buffer = '\n'
    buffer += '%s - Update interval: %d seconds\n' % (now, interval)
    buffer += 'Status: %s  Iteration: %d  Failures: %d  Runtime: %s\n' % \
              (status.state, status.iteration, status.failures, runtime)
    buffer += '-' * 80 + '\n'
    for site in sites:
        if current.hostname == site.hostname:
            marker = '>>>'
        else:
            marker = '   '
        times = site.rtt_times()
        buffer += '%3s %-25s %-4s  %3d%% %d/%d pings  %.3f/%.3f/%.3f ms\n' % \
                  (marker, site.hostname, site.status(), site.uptime(),
                   site.successes, site.attempts,
                   times[0], times[1], times[2])
    buffer += '-' * 80 + '\n'
    buffer += '\n'
    for state in status.generator():
        buffer += '     %10s: %6d events  Last event: %s\n' % \
                  (state['name'], state['events'], state['last'])
    buffer += '\n'
    
    if logger.getEffectiveLevel() > logging.DEBUG:
        client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        client.sendto(buffer.encode('utf-8'), ('localhost', 22222))
        client.close()
    else:
        print(buffer)


#
# Signal handling.
#

terminate = threading.Event()

def signal_handler(signum, frame):
    terminate.set()
    mqtt_client.disconnect()


#
# Compute the delay until the next interval boundary.
#

def delay(interval):
    return interval - (time.time() % interval)


#
# Current date and time.
#

def time_now():
    return datetime.datetime.fromtimestamp(round(time.time()))


#
# Thread collecting Internet speed every hour on the hour.
#

speedtest_lock = threading.Lock()
speedtest_result = None

def speedtest(interval):

    global speedtest_result

    args = ['/usr/bin/speedtest', '--json']

    while not terminate.wait(delay(interval)):

        process = subprocess.Popen(' '.join(args), shell=True,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        returncode =  process.returncode
        if  returncode != 0:
            message = '{} - {} / {}'.format(returncode,
                                            stdout.decode('utf-8'),
                                            stderr.decode('utf-8'))
            logger.error('speedtest: error - {}'.format(message))

        result = json.loads(stdout.decode('utf-8'))
        with speedtest_lock:
            if process.returncode == 0:
                speedtest_result = result
            else:
                speedtest_result = None


#
# MQTT connection and message handlers.
#

def mqtt_on_connect(client, userdata, flags, rc):
    logger.debug('on_connect: userdata=%s rc=%d' % (userdata,  rc))
    (result, mid) = client.publish(mqtt_topic, '{"connected": "true"}', 0, True)

def mqtt_on_message(client, userdata, message):
    logger.debug('on_message: %s %s %d' %
                 (message.topic, message.payload.decode("utf-8"),
                  message.qos[0]))

def mqtt_on_publish(client, userdata, mid):
    logger.debug('on_publish: userdata=%s mid=%d' % (userdata, mid))

def mqtt_on_log(client, userdata, level, message):
    logger.debug('on_log: userdata=%s level=%s message=%s' %
                 (userdata, level, message))


#
# Main routine.
#

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description='Network Monitor')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Use verbose logging.')
    parser.add_argument('-c', '--file', action='store',
                        default='/etc/internet-status/monitor.conf',
                        help='Configuration file.')
    arguments = parser.parse_args()

    configuration = configparser.ConfigParser(allow_no_value=True)
    configuration.read(arguments.file)

    ping_interval = int(configuration['monitor'].get('interval', '15'))

    speedtest_interval = int(configuration['speedtest'].get('interval', '3600'))

    level = int(configuration['logging'].get('level', '40'))
    logger = logging.getLogger(__name__)
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(logging.Formatter('%(asctime)s %(message)s'))
    logger.addHandler(handler)
    logger.setLevel(level)

    mqtt_topic = configuration['mqtt'].get('topic', 'internet')
    mqtt_server = configuration['mqtt'].get('server', 'localhost')
    mqtt_port = int(configuration['mqtt'].get('port', '1883'))

    mqtt_client = mqtt.Client('monitor-'+ socket.gethostname(), True)
    mqtt_client.will_set(mqtt_topic, '{"connected": "false"}', 0, True)
    mqtt_client.on_message = mqtt_on_message
    mqtt_client.on_connect = mqtt_on_connect
    mqtt_client.on_publish = mqtt_on_publish
    #mqtt_client.on_log = mqtt_on_log

    mqtt_client.loop_start()
    mqtt_client.connect(mqtt_server, mqtt_port, 60)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    status = Status()
    sites = []

    for site in configuration.options('sites'):
        sites.append(Site(site))

    speedtest_thread = threading.Thread(target=speedtest, args=(speedtest_interval,))
    speedtest_thread.start()

    t0 = time_now()

    index = 0
    ping_delay = 0.001
    while not terminate.wait(ping_delay):

        now = time_now()

        current = sites[index % len(sites)]
        index += 1
        status.update(current.ping())

        message = {'status': {'score': round(status.score, 2),
                              'state': status.state}}
        with speedtest_lock:
            if speedtest_result:
                message['speedtest'] = speedtest_result
                speedtest_result = None
        mqtt_client.publish(mqtt_topic, json.dumps(message))

        report(status, sites, current, ping_interval, now, now - t0)

        if not status.state:
            ping_delay = ping_interval

    sys.exit(0)
